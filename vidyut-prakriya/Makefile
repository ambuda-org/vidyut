# Main commands
# ~~~~~~~~~~~~~

# Generates all tinantas supported by the program and writes them to stdout.
create_tinantas:
	cargo run --release --bin create_tinantas


# Generates all krdantas-prAtipadikas supported by the program and writes them to stdout.
create_krdantas:
	cargo run --release --bin create_krdantas


# Unit tests
# ~~~~~~~~~~

# Runs all unit tests in the crate.
unit_tests:
	cargo test --lib

# Generates a simple coverage report and writes it to disk as an HTML file.
coverage:
	cargo llvm-cov --html


# Integration tests
# ~~~~~~~~~~~~~~~~~

# Generates all tinantas supported by the program and writes them to disk.
create_test_files:
	cargo build --release
	../target/release/create_tinantas --prayoga kartari > test-files/tinantas-basic-kartari.csv
	../target/release/create_tinantas --sanadi Ric --prayoga kartari > test-files/tinantas-nic-kartari.csv
	../target/release/create_tinantas --sanadi san --prayoga kartari > test-files/tinantas-san-kartari.csv
	../target/release/create_tinantas --sanadi yaN --prayoga kartari > test-files/tinantas-yan-kartari.csv
	../target/release/create_tinantas --prayoga karmani > test-files/tinantas-basic-karmani.csv
	../target/release/create_krdantas --krt ktvA > test-files/krdantas-ktvA.csv
	../target/release/create_krdantas --krt kta > test-files/krdantas-kta.csv

create_subantas:
	# Work-in-progress tests for subantas.
	cargo run --bin create_subantas > test-files/subantas.csv

# Runs a full evaluation over all forms generated by vidyut-prakriya. `hash` is
# the SHA-256 hash of the test file. We use `hash` to verify test file
# integrity and ensure that our test cases are stable.
#
# NOTE: test files might contain invalid forms. Our goal with this test is
# simply to confirm that the system hasn't changed in unexpected ways.
test_all: test_tinantas test_krdantas

test_tinantas:
	cargo build --release
	../target/release/test_tinantas \
		--test-cases test-files/tinantas-basic-kartari.csv \
	    --hash "d36f12f9950166b114f805fb9795ef5cc8b2de4f03955415414ffb18eaa38702"
	../target/release/test_tinantas \
		--test-cases test-files/tinantas-nic-kartari.csv \
	    --hash "90f440e46d33b78afd29059e64271f0e451cb1106530c7733d8daba07578785b"
	../target/release/test_tinantas \
		--test-cases test-files/tinantas-san-kartari.csv \
	    --hash "f141c67ce059bba9e0fd1cd012cdccec5e04afe37d7905caafb45b5dfa56a4c4"
	../target/release/test_tinantas \
		--test-cases test-files/tinantas-yan-kartari.csv \
	    --hash "c729e188dd3b3b80fda1aac9d674a5ee783871e467f4ec7eb0af5e773361b7c9"
	../target/release/test_tinantas \
		--test-cases test-files/tinantas-basic-karmani.csv \
	    --hash "f8ea77025192efbb9279528170419a91d70417577b862c58a7e93a6e1451a14a"

test_krdantas:
	cargo build --release
	../target/release/test_krdantas \
		--test-cases test-files/krdantas-ktvA.csv \
	    --hash "1d38d2491d5c8353bed502acfdf9b34dc92acb859f34f505ca256988f0988fe7"
	../target/release/test_krdantas \
		--test-cases test-files/krdantas-kta.csv \
	    --hash "e6543b9aa098eaae3ab706cf5a2dc93047a71313639243f84245215497c41e4e"

test_subantas:
	cargo run --bin test_subantas -- \
		--test-cases test-files/subantas.csv
	    # --hash "56a068a1abd7518f3d1fd6421e1676c4b375011cbd1ae3bd6c6d147d2f9e6013"


# Performance
# ~~~~~~~~~~~

# Profiles the program's execution time on OSX. This command will probably not
# work on other operating systems.
profile-time-osx:
	cargo instruments -t time --release --bin create_test_files


# Other
# ~~~~~

# Generates project docs and opens them in your default browser.
docs:
	cargo doc --no-deps --open


# Web builds
# ----------

# Builds WASM module and JS wrapper (pkg/vidyut_prakriya.js).
#
# This is a release build. Creating it will be slower but smaller and (perhaps)
# more performant.
wasm_release:
	wasm-pack build --target web --release

# Builds WASM module and JS wrapper (pkg/vidyut_prakriya.js).
#
# This is a dev build. Creating it will be faster, but size and performance
# will not be optimized.
wasm_dev:
	wasm-pack build --target web

# Builds a simple web debugger.
debugger: wasm_dev
	./scripts/run-debugger.sh
