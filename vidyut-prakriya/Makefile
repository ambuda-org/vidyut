# Main commands
# ~~~~~~~~~~~~~

# Generates all tinantas supported by the program and writes them to stdout.
create_tinantas:
	cargo run --release --bin create_tinantas


# Generates all krdantas-prAtipadikas supported by the program and writes them to stdout.
create_krdantas:
	cargo run --release --bin create_krdantas


# Unit tests
# ~~~~~~~~~~

# Runs all unit tests in the crate.
unit_tests:
	cargo test --lib

# Generates a simple coverage report and writes it to disk as an HTML file.
coverage:
	cargo llvm-cov --html


# Integration tests
# ~~~~~~~~~~~~~~~~~

# Generates all tinantas supported by the program and writes them to disk.
create_test_files:
	cargo build --release
	../target/release/create_tinantas --prayoga kartari > test-files/tinantas-basic-kartari.csv
	../target/release/create_tinantas --sanadi Ric --prayoga kartari > test-files/tinantas-nic-kartari.csv
	../target/release/create_tinantas --sanadi san --prayoga kartari > test-files/tinantas-san-kartari.csv
	../target/release/create_tinantas --sanadi yaN --prayoga kartari > test-files/tinantas-yan-kartari.csv
	../target/release/create_tinantas --sanadi yaNluk --prayoga kartari > test-files/tinantas-yan-luk-kartari.csv
	../target/release/create_tinantas --sanadi san,Ric --prayoga kartari > test-files/tinantas-san-nic-kartari.csv
	../target/release/create_tinantas --sanadi Ric,san --prayoga kartari > test-files/tinantas-nic-san-kartari.csv
	../target/release/create_tinantas --prayoga karmani > test-files/tinantas-basic-karmani.csv
	../target/release/create_tinantas --sanadi Ric --prayoga karmani > test-files/tinantas-nic-karmani.csv
	../target/release/create_tinantas --sanadi san --prayoga karmani > test-files/tinantas-san-karmani.csv
	../target/release/create_tinantas --sanadi yaN --prayoga karmani > test-files/tinantas-yan-karmani.csv
	../target/release/create_tinantas --sanadi san,Ric --prayoga karmani > test-files/tinantas-san-nic-karmani.csv
	../target/release/create_tinantas --sanadi Ric,san --prayoga karmani > test-files/tinantas-nic-san-karmani.csv
	../target/release/create_krdantas --krt ktvA > test-files/krdantas-ktvA.csv
	../target/release/create_krdantas --krt kta > test-files/krdantas-kta.csv
	../target/release/create_dhatus > test-files/dhatus.csv

# Runs a full evaluation over all forms generated by vidyut-prakriya. `hash` is
# the SHA-256 hash of the test file. We use `hash` to verify test file
# integrity and ensure that our test cases are stable.
#
# NOTE: test files might contain invalid forms. Our goal with this test is
# simply to confirm that the system hasn't changed in unexpected ways.
test_all: test_tinantas test_krdantas test_dhatus

test_tinantas:
	cargo build --release --bin test_results
	../target/release/test_results \
		--data-type tinanta \
		--test-cases test-files/tinantas-basic-kartari.csv \
	  --hash "51d6017bcc2516e2af0d028d251b72165e2f19bafb0839e35110f157934609db"
	../target/release/test_results \
		--data-type tinanta \
  	--test-cases test-files/tinantas-nic-kartari.csv \
    --hash "0df6d10e8ac4628ccc10a719d1e5022cb364575ce6c10e26ab1e04ac3114b163"
	../target/release/test_results \
		--data-type tinanta \
		--test-cases test-files/tinantas-san-kartari.csv \
		--hash "9145fff93b263223e270a2cde065bb3fb0c811df24ab42a043eae39e2f756234"
	../target/release/test_results \
		--data-type tinanta \
		--test-cases test-files/tinantas-yan-kartari.csv \
		--hash "1998c701f314c8bcdcd48d59300debabd39d3ba586341e5a515815d6a1c2503f"
	../target/release/test_results \
		--data-type tinanta \
		--test-cases test-files/tinantas-yan-luk-kartari.csv \
		--hash "2fa465c607a03c7ad1d4b5f528a81ca2ea1357dc40f7923cc90639e5d2df0829"
	../target/release/test_results \
		--data-type tinanta \
		--test-cases test-files/tinantas-san-nic-kartari.csv \
		--hash "4379daf9d118797bd085b03d57cac210ada84ece3972c0d4458221cd2098b0f7"
	../target/release/test_results \
		--data-type tinanta \
		--test-cases test-files/tinantas-nic-san-kartari.csv \
		--hash "309d08d11718a2fc54e61d9edb976d7fe09aca13ec88a75879f1f5803cf69aca"
	../target/release/test_results \
		--data-type tinanta \
		--test-cases test-files/tinantas-basic-karmani.csv \
    --hash "a30032f2b32cd8008c91c95b7e03e3e9f11386179bb70fd26f5eccf8748d0afe"
	../target/release/test_results \
		--data-type tinanta \
		--test-cases test-files/tinantas-nic-karmani.csv \
    --hash "5de5d1f252df630448bb2af0403c15b5f31b398a76234882e47ebeb34f94bf4f"
	../target/release/test_results \
		--data-type tinanta \
		--test-cases test-files/tinantas-san-karmani.csv \
    --hash "725dfe8657b9543aede4a73798b50a89a389c0d74ce5c0c9ecb91f4447d60495"
	../target/release/test_results \
		--data-type tinanta \
		--test-cases test-files/tinantas-yan-karmani.csv \
    --hash "6167063aed3186aae0a01d635156618f6cf7ba09c7d7c2ed93e076dc5ef46841"
	../target/release/test_results \
		--data-type tinanta \
		--test-cases test-files/tinantas-san-nic-karmani.csv \
		--hash "085f3486d19af249b955f1a0f534cec5f3cdd953bf3f6307a612f423313af207"
	../target/release/test_results \
		--data-type tinanta \
		--test-cases test-files/tinantas-nic-san-karmani.csv \
		--hash "e1c50923278a24c447e2a17552dc882ccefe613c820a8fd4ee60ee24658f0e01"

test_krdantas:
	cargo build --release --bin test_results
	../target/release/test_results \
		--data-type krdanta \
		--test-cases test-files/krdantas-ktvA.csv \
	  --hash "1f41354393e7490afe73a2cb7f873bc75c6495a6188f739f5ecac08a2ee725a4"
	../target/release/test_results \
		--data-type krdanta \
		--test-cases test-files/krdantas-kta.csv \
	  --hash "aa72a9d4cec0f82248de228108ab881789962c12fe0094134657a55340822247"

test_dhatus:
	cargo build --release --bin test_results
	../target/release/test_results \
		--data-type dhatu \
		--test-cases test-files/dhatus.csv \
	  --hash "398f83acdac10be88098bf89284369e08a714471a4007c42f694a8fb685d2d4f"


test_subantas:
	cargo run --bin test_subantas -- \
		--test-cases test-files/subantas.csv

check_rule_coverage:
	./scripts/check_rule_coverage.py > report.log 


# Performance
# ~~~~~~~~~~~

# Profiles the program's execution time on OSX. This command will probably not
# work on other operating systems.
profile-time-osx:
	cargo instruments -t time --release --example bench


# Other
# ~~~~~

# Generates project docs and opens them in your default browser.
docs:
	cargo doc --no-deps --open


# Web builds
# ----------

# Builds WASM module and JS wrapper (pkg/vidyut_prakriya.js).
#
# This is a release build. Creating it will be slower but smaller and (perhaps)
# more performant.
wasm_release:
	wasm-pack build --target web --release

# Builds WASM module and JS wrapper (pkg/vidyut_prakriya.js).
#
# This is a dev build. Creating it will be faster, but size and performance
# will not be optimized.
wasm_dev:
	wasm-pack build --target web

# Builds a simple web debugger.
debugger:
	./scripts/run-debugger.sh
